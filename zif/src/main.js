import "./style.css";
import encode from "gifski-wasm";

// -----------------------------
// i18n (Î≤àÏó≠ Î¶¨ÏÜåÏä§)
// -----------------------------
let currentLanguage = localStorage.getItem("zifLanguage") || "ko";

const translations = {
  ko: {
    title: "ZIF",
    subtitle: "Premium Video to GIF Converter",
    tagline: "Í∞úÏù∏ Ï†ïÎ≥¥ Í±±Ï†ï ÏóÜÎäî ÏµúÍ≥† ÌíàÏßàÏùò GIF Î≥ÄÌôò ÌîÑÎ°úÍ∑∏Îû®",
    uploadText: "ÎπÑÎîîÏò§ ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
    uploadSubtext: "ÌÅ¥Î¶≠ÌïòÍ±∞ÎÇò ÎìúÎûòÍ∑∏ & ÎìúÎ°≠ÏúºÎ°ú ÏóÖÎ°úÎìúÌïòÎ©¥ GIFÍ∞Ä ÏÉùÏÑ±Îê©ÎãàÎã§.",
    previewTitle: "ÌîÑÎ†àÏûÑ ÎØ∏Î¶¨Î≥¥Í∏∞",
    outputTitle: "ÏÉùÏÑ±Îêú GIF",
    downloadText: "GIF Îã§Ïö¥Î°úÎìú",
    advancedSettingsTitle: "Í≥†Í∏â ÏÑ§Ï†ï",
    intervalLabel: "ÌîÑÎ†àÏûÑ Í∞ÑÍ≤© (Ï¥à)",
    outputWidthLabel: "Ï∂úÎ†• Í∞ÄÎ°ú ÌÅ¨Í∏∞ (px)",
    qualityLabel: "ÌíàÏßà (1~100)",
    fpsLabel: "FPS (ÌîÑÎ†àÏûÑ/Ï¥à)",
    reconvertText: "üîÑ ÏÉà ÏÑ§Ï†ïÏúºÎ°ú GIF Ïû¨ÏÉùÏÑ±",
    loadingVideo: "ÎπÑÎîîÏò§Î•º Î°úÎî© Ï§ë...",
    extractingFrames: "ÌîÑÎ†àÏûÑÏùÑ Ï∂îÏ∂ú Ï§ë...",
    generatingGif: "GIF ÏÉùÏÑ± Ï§ë...",
    completed: "GIF ÏÉùÏÑ± ÏôÑÎ£å!",
    completedSubtext: "ÏïÑÎûò Í≥†Í∏â ÏÑ§Ï†ïÏóêÏÑú Îã§Î•∏ ÏòµÏÖòÏúºÎ°ú Ïû¨ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§",
    regeneratingGif: "GIF Ïû¨ÏÉùÏÑ± Ï§ë...",
    langToggleText: "ÌïúÍµ≠Ïñ¥",
  },
  en: {
    title: "ZIF",
    subtitle: "Premium Video to GIF Converter",
    tagline:
      "The best quality GIF converter without worrying about your privacy.",
    uploadText: "Select Video File",
    uploadSubtext:
      "Click or drag & drop to upload and automatically generate GIF.",
    previewTitle: "Frame Preview",
    outputTitle: "Generated GIF",
    downloadText: "Download GIF",
    advancedSettingsTitle: "Advanced Settings",
    intervalLabel: "Frame Interval (seconds)",
    outputWidthLabel: "Output Width (px)",
    qualityLabel: "Quality (1~100)",
    fpsLabel: "FPS (frames/second)",
    reconvertText: "üîÑ Regenerate GIF with New Settings",
    loadingVideo: "Loading video...",
    extractingFrames: "Extracting frames...",
    generatingGif: "Generating GIF...",
    completed: "GIF Generation Complete!",
    completedSubtext:
      "You can regenerate with different options in advanced settings below",
    regeneratingGif: "Regenerating GIF...",
    langToggleText: "English",
  },
  ja: {
    title: "ZIF",
    subtitle: "„Éó„É¨„Éü„Ç¢„É† Video to GIF „Ç≥„É≥„Éê„Éº„Çø„Éº",
    tagline: "ÊúÄÈ´òÂìÅË≥™„ÅÆGIFÂ§âÊèõ„ÅÆ„Åü„ÇÅ„ÅÆÂÆâÂÖ®„ÅßÈù©Êñ∞ÁöÑ„Å™„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥",
    uploadText: "„Éì„Éá„Ç™„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
    uploadSubtext:
      "„ÇØ„É™„ÉÉ„ÇØ„Åæ„Åü„ÅØ„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Åß„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åô„Çã„Å®Ëá™ÂãïÁöÑ„Å´GIF„ÅåÁîüÊàê„Åï„Çå„Åæ„Åô„ÄÇ",
    previewTitle: "„Éï„É¨„Éº„É†„Éó„É¨„Éì„É•„Éº",
    outputTitle: "ÁîüÊàê„Åï„Çå„ÅüGIF",
    downloadText: "üì• GIF„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
    advancedSettingsTitle: "Ë©≥Á¥∞Ë®≠ÂÆö",
    intervalLabel: "„Éï„É¨„Éº„É†ÈñìÈöîÔºàÁßíÔºâ",
    outputWidthLabel: "Âá∫ÂäõÂπÖÔºàpxÔºâ",
    qualityLabel: "ÂìÅË≥™Ôºà1~100Ôºâ",
    fpsLabel: "FPSÔºà„Éï„É¨„Éº„É†/ÁßíÔºâ",
    reconvertText: "üîÑ Êñ∞„Åó„ÅÑË®≠ÂÆö„ÅßGIFÂÜçÁîüÊàê",
    loadingVideo: "„Éì„Éá„Ç™„ÇíË™≠„ÅøËæº„Åø‰∏≠...",
    extractingFrames: "„Éï„É¨„Éº„É†„ÇíÊäΩÂá∫‰∏≠...",
    generatingGif: "GIFÁîüÊàê‰∏≠...",
    completed: "GIFÁîüÊàêÂÆå‰∫ÜÔºÅ",
    completedSubtext: "‰∏ã„ÅÆË©≥Á¥∞Ë®≠ÂÆö„Åß‰ªñ„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥„ÅßÂÜçÁîüÊàê„Åß„Åç„Åæ„Åô",
    regeneratingGif: "GIFÂÜçÁîüÊàê‰∏≠...",
    langToggleText: "Êó•Êú¨Ë™û",
  },
  zh: {
    title: "ZIF",
    subtitle: "È´òÁ∫ßËßÜÈ¢ëËΩ¨GIFËΩ¨Êç¢Âô®",
    tagline: "Áî®‰∫éÊúÄÈ´òË¥®ÈáèGIFËΩ¨Êç¢ÁöÑÂÆâÂÖ®ÂàõÊñ∞Ëß£ÂÜ≥ÊñπÊ°à",
    uploadText: "ÈÄâÊã©ËßÜÈ¢ëÊñá‰ª∂",
    uploadSubtext: "ÁÇπÂáªÊàñÊãñÊîæ‰∏ä‰º†ÔºåËá™Âä®ÁîüÊàêGIF„ÄÇ",
    previewTitle: "Â∏ßÈ¢ÑËßà",
    outputTitle: "ÁîüÊàêÁöÑGIF",
    downloadText: "üì• ‰∏ãËΩΩGIF",
    advancedSettingsTitle: "È´òÁ∫ßËÆæÁΩÆ",
    intervalLabel: "Â∏ßÈó¥ÈöîÔºàÁßíÔºâ",
    outputWidthLabel: "ËæìÂá∫ÂÆΩÂ∫¶ÔºàpxÔºâ",
    qualityLabel: "Ë¥®ÈáèÔºà1~100Ôºâ",
    fpsLabel: "FPSÔºàÂ∏ß/ÁßíÔºâ",
    reconvertText: "üîÑ ‰ΩøÁî®Êñ∞ËÆæÁΩÆÈáçÊñ∞ÁîüÊàêGIF",
    loadingVideo: "Ê≠£Âú®Âä†ËΩΩËßÜÈ¢ë...",
    extractingFrames: "Ê≠£Âú®ÊèêÂèñÂ∏ß...",
    generatingGif: "Ê≠£Âú®ÁîüÊàêGIF...",
    completed: "GIFÁîüÊàêÂÆåÊàêÔºÅ",
    completedSubtext: "ÊÇ®ÂèØ‰ª•Âú®‰∏ãÈù¢ÁöÑÈ´òÁ∫ßËÆæÁΩÆ‰∏≠‰ΩøÁî®‰∏çÂêåÈÄâÈ°πÈáçÊñ∞ÁîüÊàê",
    regeneratingGif: "Ê≠£Âú®ÈáçÊñ∞ÁîüÊàêGIF...",
    langToggleText: "‰∏≠Êñá",
  },
};

const tooltips = {
  ko: {
    interval:
      "ÎπÑÎîîÏò§ÏóêÏÑú ÌîÑÎ†àÏûÑÏùÑ Ï∂îÏ∂úÌïòÎäî ÏãúÍ∞Ñ Í∞ÑÍ≤©ÏûÖÎãàÎã§. Í∞íÏù¥ ÏûëÏùÑÏàòÎ°ù Îçî Î∂ÄÎìúÎü¨Ïö¥ GIFÍ∞Ä ÏÉùÏÑ±ÎêòÏßÄÎßå ÌååÏùº ÌÅ¨Í∏∞Í∞Ä Ïª§ÏßëÎãàÎã§.",
    outputWidth:
      "GIFÏùò Í∞ÄÎ°ú ÌîΩÏÖÄ ÌÅ¨Í∏∞ÏûÖÎãàÎã§. Í∞íÏù¥ ÌÅ¥ÏàòÎ°ù ÌôîÏßàÏù¥ Ï¢ãÏïÑÏßÄÏßÄÎßå ÌååÏùº ÌÅ¨Í∏∞Í∞Ä Ïª§ÏßëÎãàÎã§.",
    quality:
      "GIFÏùò ÏïïÏ∂ï ÌíàÏßàÏûÖÎãàÎã§. 1Ïù¥ ÏµúÍ≥† ÌíàÏßà(ÏµúÎåÄ ÌååÏùº ÌÅ¨Í∏∞), 100Ïù¥ ÏµúÏ†Ä ÌíàÏßà(ÏµúÏÜå ÌååÏùº ÌÅ¨Í∏∞)ÏûÖÎãàÎã§.",
    fps: "Ï¥àÎãπ ÌëúÏãúÎêòÎäî ÌîÑÎ†àÏûÑ ÏàòÏûÖÎãàÎã§. Í∞íÏù¥ ÌÅ¥ÏàòÎ°ù Îπ†Î•¥Í≤å Ïû¨ÏÉùÎêòÍ≥†, ÏûëÏùÑÏàòÎ°ù ÎäêÎ¶¨Í≤å Ïû¨ÏÉùÎê©ÎãàÎã§.",
  },
  en: {
    interval:
      "Time interval for extracting frames from video. Smaller values create smoother GIFs but larger file sizes.",
    outputWidth:
      "Horizontal pixel size of the GIF. Larger values improve quality but increase file size.",
    quality:
      "GIF compression quality. 1 is highest quality (largest file size), 100 is lowest quality (smallest file size).",
    fps: "Frames displayed per second. Higher values play faster, lower values play slower.",
  },
  ja: {
    interval:
      "„Éì„Éá„Ç™„Åã„Çâ„Éï„É¨„Éº„É†„ÇíÊäΩÂá∫„Åô„ÇãÊôÇÈñìÈñìÈöî„Åß„Åô„ÄÇÂÄ§„ÅåÂ∞è„Åï„ÅÑ„Åª„Å©„Çπ„É†„Éº„Ç∫„Å™GIF„ÅåÁîüÊàê„Åï„Çå„Åæ„Åô„Åå„ÄÅ„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åè„Å™„Çä„Åæ„Åô„ÄÇ",
    outputWidth:
      "GIF„ÅÆÊ®™„Éî„ÇØ„Çª„É´„Çµ„Ç§„Ç∫„Åß„Åô„ÄÇÂÄ§„ÅåÂ§ß„Åç„ÅÑ„Åª„Å©ÁîªË≥™„ÅåËâØ„Åè„Å™„Çä„Åæ„Åô„Åå„ÄÅ„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åè„Å™„Çä„Åæ„Åô„ÄÇ",
    quality:
      "GIF„ÅÆÂúßÁ∏ÆÂìÅË≥™„Åß„Åô„ÄÇ1„ÅåÊúÄÈ´òÂìÅË≥™ÔºàÊúÄÂ§ß„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Ôºâ„ÄÅ100„ÅåÊúÄ‰ΩéÂìÅË≥™ÔºàÊúÄÂ∞è„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Ôºâ„Åß„Åô„ÄÇ",
    fps: "1ÁßíÈñì„Å´Ë°®Á§∫„Åï„Çå„Çã„Éï„É¨„Éº„É†Êï∞„Åß„Åô„ÄÇÂÄ§„ÅåÂ§ß„Åç„ÅÑ„Åª„Å©È´òÈÄüÂÜçÁîü„Åï„Çå„ÄÅÂ∞è„Åï„ÅÑ„Åª„Å©‰ΩéÈÄüÂÜçÁîü„Åï„Çå„Åæ„Åô„ÄÇ",
  },
  zh: {
    interval:
      "‰ªéËßÜÈ¢ë‰∏≠ÊèêÂèñÂ∏ßÁöÑÊó∂Èó¥Èó¥Èöî„ÄÇÂÄºË∂äÂ∞èÁîüÊàêÁöÑGIFË∂äÊµÅÁïÖÔºå‰ΩÜÊñá‰ª∂Â§ßÂ∞èË∂äÂ§ß„ÄÇ",
    outputWidth: "GIFÁöÑÊ∞¥Âπ≥ÂÉèÁ¥†Â§ßÂ∞è„ÄÇÂÄºË∂äÂ§ßÁîªË¥®Ë∂äÂ•ΩÔºå‰ΩÜÊñá‰ª∂Â§ßÂ∞èË∂äÂ§ß„ÄÇ",
    quality:
      "GIFÂéãÁº©Ë¥®Èáè„ÄÇ1‰∏∫ÊúÄÈ´òË¥®ÈáèÔºàÊúÄÂ§ßÊñá‰ª∂Â§ßÂ∞èÔºâÔºå100‰∏∫ÊúÄ‰ΩéË¥®ÈáèÔºàÊúÄÂ∞èÊñá‰ª∂Â§ßÂ∞èÔºâ„ÄÇ",
    fps: "ÊØèÁßíÊòæÁ§∫ÁöÑÂ∏ßÊï∞„ÄÇÂÄºË∂äÂ§ßÊí≠ÊîæË∂äÂø´ÔºåË∂äÂ∞èÊí≠ÊîæË∂äÊÖ¢„ÄÇ",
  },
};

// -----------------------------
// Í≥µÏö© Ïú†Ìã∏
// -----------------------------
function ready(fn) {
  if (document.readyState !== "loading") fn();
  else document.addEventListener("DOMContentLoaded", fn, { once: true });
}

function updateAllTexts() {
  const t = translations[currentLanguage] || translations.ko;

  const setText = (id, text) => {
    const el = document.getElementById(id);
    if (el) el.textContent = text;
  };

  setText("langToggleText", t.langToggleText);
  setText("title", t.title);
  setText("subtitle", t.subtitle);
  setText("tagline", t.tagline);
  setText("uploadText", t.uploadText);
  setText("uploadSubtext", t.uploadSubtext);
  setText("previewTitle", t.previewTitle);
  setText("outputTitle", t.outputTitle);
  setText("downloadText", t.downloadText);
  setText("advancedSettingsTitle", t.advancedSettingsTitle);
  setText("intervalLabel", t.intervalLabel);
  setText("outputWidthLabel", t.outputWidthLabel);
  setText("qualityLabel", t.qualityLabel);
  setText("fpsLabel", t.fpsLabel);
  setText("reconvertText", t.reconvertText);

  setupTooltips();
}

function setupTooltips() {
  const groups = document.querySelectorAll(".setting-group");
  const tt = tooltips[currentLanguage] || tooltips.ko;

  groups.forEach((group) => {
    const input = group.querySelector("input");
    if (!input) return;

    const key = input.id;
    const existing = group.querySelector(".tooltip");
    if (existing) existing.remove();

    if (!tt[key]) return;

    const tip = document.createElement("div");
    tip.className = "tooltip";
    tip.textContent = tt[key];
    group.appendChild(tip);

    group.addEventListener("mouseenter", () => tip.classList.add("show"));
    group.addEventListener("mouseleave", () => tip.classList.remove("show"));
  });
}

function toggleLanguage() {
  const languages = ["ko", "en", "ja", "zh"];
  const i = languages.indexOf(currentLanguage);
  currentLanguage = languages[(i + 1) % languages.length];
  localStorage.setItem("zifLanguage", currentLanguage);
  updateAllTexts();
}

// -----------------------------
// Î©îÏù∏ Î°úÏßÅ (DOM Ready)
// -----------------------------
ready(() => {
  // ÏöîÏÜå Î™®Ïùå
  const langToggle = document.getElementById("langToggle");
  if (langToggle) langToggle.addEventListener("click", toggleLanguage);

  updateAllTexts(); // Ï¥àÍ∏∞ Î†åÎçî

  // Í∏∞Î≥∏Í∞í
  let defaultInterval = 0.3;
  let defaultwWidth = 420;
  let defaultQuality = 80;
  let defaultFps = 10;

  let frames = [];
  let outputWidth = 420;
  let outputHeight = 0;
  let currentVideoFile = null;

  // DOM refs
  const videoInput = document.getElementById("videoInput");
  const reconvertBtn = document.getElementById("reconvertBtn");
  const video = document.getElementById("video");
  const canvas = document.getElementById("canvas");
  const preview = document.getElementById("preview");
  const output = document.getElementById("output");
  const downloadLink = document.getElementById("downloadLink");
  const intervalInput = document.getElementById("interval");
  const qualityInput = document.getElementById("quality");
  const fpsInput = document.getElementById("fps");
  const outputWidthInput = document.getElementById("outputWidth");
  const uploadSection = document.getElementById("uploadSection");
  const outputSection = document.getElementById("outputSection");
  const previewSection = document.getElementById("previewSection");
  const advancedToggle = document.getElementById("advancedToggle");
  const advancedContent = document.getElementById("advancedContent");
  const toggleIcon = document.getElementById("toggleIcon");

  // ÌïÑÏàò ÏöîÏÜå ÏóÜÏúºÎ©¥ Ï§ëÎã®
  if (!canvas || !video || !uploadSection) return;

  // Í≥†Í∏â ÏÑ§Ï†ï ÌÜ†Í∏Ä
  if (advancedToggle && advancedContent && toggleIcon) {
    advancedToggle.addEventListener("click", () => {
      advancedContent.classList.toggle("expanded");
      toggleIcon.classList.toggle("rotated");
    });
  }

  // ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠
  uploadSection.addEventListener("dragover", (e) => {
    e.preventDefault();
    uploadSection.classList.add("dragover");
  });
  uploadSection.addEventListener("dragleave", (e) => {
    e.preventDefault();
    uploadSection.classList.remove("dragover");
  });
  uploadSection.addEventListener("drop", (e) => {
    e.preventDefault();
    uploadSection.classList.remove("dragover");
    const files = e.dataTransfer?.files || [];
    if (files.length > 0 && files[0].type.startsWith("video/")) {
      handleVideoFile(files[0]);
    }
  });
  uploadSection.addEventListener("click", () => {
    videoInput?.click();
  });

  // ÌååÏùº ÏÑ†ÌÉù
  videoInput?.addEventListener("change", (e) => {
    const file = e.target.files?.[0];
    if (file) handleVideoFile(file);
  });

  // Ïû¨ÏÉùÏÑ± Î≤ÑÌäº
  reconvertBtn?.addEventListener("click", async () => {
    if (!currentVideoFile) return;
    if (output) output.innerHTML = "";
    if (downloadLink) downloadLink.style.display = "none";

    setStageText(
      translations[currentLanguage].generatingGif || "GIF ÏÉùÏÑ± Ï§ë..."
    );

    const original = reconvertBtn.textContent;
    reconvertBtn.innerHTML = `<div class="loading"><div class="spinner"></div><span>${
      translations[currentLanguage].regeneratingGif || "GIF Ïû¨ÏÉùÏÑ± Ï§ë..."
    }</span></div>`;
    reconvertBtn.disabled = true;

    const newInterval = parseFloat(intervalInput?.value) || 1;
    const newWidth = parseInt(outputWidthInput?.value, 10) || 420;
    const newQuality = parseInt(qualityInput?.value, 10) || 80;
    const newFps = parseInt(fpsInput?.value, 10) || 10;

    if (newWidth !== defaultwWidth || newInterval !== defaultInterval) {
      defaultwWidth = newWidth;
      defaultInterval = newInterval;
      outputWidth = newWidth;
      const aspect = (video.videoHeight || 1) / (video.videoWidth || 1);
      outputHeight = Math.round(outputWidth * aspect);

      setStageText(
        translations[currentLanguage].extractingFrames || "ÌîÑÎ†àÏûÑÏùÑ Ï∂îÏ∂ú Ï§ë..."
      );
      frames = await extractFrames(video, newInterval);
    }

    await generateGIF(frames, newWidth, newQuality, newFps);

    reconvertBtn.textContent = original;
    reconvertBtn.disabled = false;

    setStageDone();
  });

  // ------------ ÎÇ¥Î∂Ä Ìï®ÏàòÎì§ ------------
  function setStageText(text) {
    uploadSection.innerHTML = `
      <div class="loading">
        <div class="spinner"></div>
        <span>${text}</span>
      </div>
    `;
  }

  function setStageDone() {
    uploadSection.innerHTML = `
      <div class="upload-icon"></div>
      <div class="upload-text">${
        translations[currentLanguage].completed || "GIF ÏÉùÏÑ± ÏôÑÎ£å!"
      }</div>
      <div class="upload-subtext">${
        translations[currentLanguage].completedSubtext ||
        "ÏïÑÎûò Í≥†Í∏â ÏÑ§Ï†ïÏóêÏÑú Îã§Î•∏ ÏòµÏÖòÏúºÎ°ú Ïû¨ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§"
      }</div>
    `;
  }

  async function handleVideoFile(file) {
    currentVideoFile = file;
    setStageText(
      translations[currentLanguage].loadingVideo || "ÎπÑÎîîÏò§Î•º Î°úÎî© Ï§ë..."
    );

    // ÎπÑÎîîÏò§ ÏßÄÏ†ï
    video.src = URL.createObjectURL(file);

    // Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÎåÄÍ∏∞
    await new Promise((resolve) => {
      if (video.readyState >= 1) return resolve();
      video.addEventListener("loadedmetadata", resolve, { once: true });
    });

    // Ï∂úÎ†• Ìè≠/ÎÜíÏù¥ Í≤∞Ï†ï
    defaultwWidth = Math.min(video.videoWidth || 420, 900);
    outputWidth = defaultwWidth;
    outputWidthInput && (outputWidthInput.value = defaultwWidth);

    const aspect = (video.videoHeight || 1) / (video.videoWidth || 1);
    outputHeight = Math.round(outputWidth * aspect);

    // ÌîÑÎ†àÏûÑ Ï∂îÏ∂ú
    setStageText(
      translations[currentLanguage].extractingFrames || "ÌîÑÎ†àÏûÑÏùÑ Ï∂îÏ∂ú Ï§ë..."
    );
    frames = await extractFrames(video, defaultInterval);

    // ÎØ∏Î¶¨Î≥¥Í∏∞ Î≥¥Ïù¥Í∏∞
    if (previewSection) previewSection.style.display = "block";

    // GIF ÏÉùÏÑ±
    setStageText(
      translations[currentLanguage].generatingGif || "GIF ÏÉùÏÑ± Ï§ë..."
    );
    await generateGIF(frames, defaultwWidth, defaultQuality, defaultFps);

    // ÏôÑÎ£å
    setStageDone();
    if (outputSection) outputSection.style.display = "block";
  }

  async function generateGIF(frameList, width, quality, fps) {
    const ctx = canvas.getContext("2d");
    const imageDatas = [];

    canvas.width = width;
    canvas.height = outputHeight;

    for (const blob of frameList) {
      const img = await blobToImage(blob);
      ctx.drawImage(img, 0, 0, width, canvas.height);
      const imageData = ctx.getImageData(0, 0, width, canvas.height);
      imageDatas.push(imageData);
    }

    const gifBuffer = await encode({
      frames: imageDatas,
      width,
      height: canvas.height,
      quality, // 1~100
      fps,
    });

    const gifBlob = new Blob([gifBuffer], { type: "image/gif" });
    const gifUrl = URL.createObjectURL(gifBlob);

    const gifImg = document.createElement("img");
    gifImg.src = gifUrl;

    if (output) {
      output.innerHTML = "";
      output.appendChild(gifImg);
    }
    if (downloadLink) {
      downloadLink.href = gifUrl;
      downloadLink.style.display = "inline-block";
    }
  }

  async function extractFrames(video, interval) {
    // Ï∫îÎ≤ÑÏä§ Î¶¨ÏÖã
    const w = canvas.width;
    canvas.width = 0;
    canvas.width = w;

    const ctx = canvas.getContext("2d");
    const duration = video.duration || 0;
    const frameList = [];

    canvas.width = outputWidth;
    canvas.height = outputHeight;

    if (preview) preview.innerHTML = "";

    for (let t = 0; t < duration; t += interval) {
      video.currentTime = t;
      await waitForSeek(video);

      ctx.drawImage(video, 0, 0, outputWidth, outputHeight);
      const blob = await new Promise((res) => canvas.toBlob(res, "image/png"));

      if (preview) {
        const img = document.createElement("img");
        img.src = URL.createObjectURL(blob);
        preview.appendChild(img);
      }

      frameList.push(blob);
    }

    return frameList;
  }

  function waitForSeek(video) {
    return new Promise((resolve) => {
      const handler = () => {
        video.removeEventListener("seeked", handler);
        resolve();
      };
      video.addEventListener("seeked", handler, { once: true });
    });
  }

  function blobToImage(blob) {
    return new Promise((resolve) => {
      const img = new Image();
      img.onload = () => resolve(img);
      img.src = URL.createObjectURL(blob);
    });
  }

  // ÌéòÏù¥ÏßÄ Ï†ÑÏó≠ ÎìúÎûòÍ∑∏ Î∞©ÏßÄ
  document.addEventListener("dragover", (e) => e.preventDefault());
  document.addEventListener("drop", (e) => e.preventDefault());
});
